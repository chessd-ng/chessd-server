--- Chessd ---

This is a implementation of a chess server, it was designed to replace
the old chessd. Hopefully the new one is more robust and more effcient.
Note that is is still in development and it is unstable, use it at your
own risk.

Suggestion, bug reports and contributions are all welcome.

----------------

To compile this code you need the following libraries:

- Boost >= 1.34
- Boost-date-time >= 1.34
- iksemel >= 1.2 (recommended >= 1.3)
- lpthread
- libpqxx

It is recommended iksemel 1.3 due to bug fixes and It's mandatory
for 64bit systems due to compatibility issues.

Here follows a detailed explanation on how to install the server,
it's is a prety long, so be pacient.

--- Setting up PostgreSQL ---

First thing to do is to setup the database. Currently the server only work
with PostgreSQL, but we plan to support MySQL in the future. So you must
install PostgreSQL if you don't have it already. I won't cover on how to
install postgres, there is a lot of documents explaining this on the
internet or it shoud be as easy as intalling a package of your distribution. 

Next you have to create a user and a database for the server. You should use
createuser and createdb commands to do it, remember to pass -P to createuser
so it will prompt for a password for the user. Then you have to load up
the database schema into the database, the schema is located in the datebase
directory. Just type:

$ psql -U <user-you-created> <dtabase-you-created> < database/pgsql.sql

--- Setting up ejabberd ---

Next step is to setup the ejabberd server, same thing as before I'll let
this task to you. I believe that any version of ejabberd will do the job,
but some admin tools of the chess server will not work on versions prior
to 2.0. Now you just have to edit the ejabberd config file, it shoud be
in /etc/ejabberd/ejabberd.cfg. You will have to look for the section that
describes the post to listen. Find a place that looks like this:

  {listen,
    [

The next line is alist of port to listened and what are those port
for. Will have to add the ports that the server will use, so add the
following lines after the square bracket:

  {<port1>, ejabberd_service, [{ip, {127, 0, 0, 1}},
          {access, all},
          {host, "rating.localhost", [{password, "secret"}]}]},

  {<port2>, ejabberd_service, [{ip, {127, 0, 0, 1}},
          {access, all},
          {host, "games.localhost", [{password, "secret"}]}]},

  {<port3>, ejabberd_service, [{ip, {127, 0, 0, 1}},
          {access, all},
          {host, "match.localhost", [{password, "secret"}]}]},

  {<port4>, ejabberd_service, [{ip, {127, 0, 0, 1}},
          {access, all},
          {host, "admin.localhost", [{password, "secret"}]}]},


Replace <port1> to <port4> to unused TCP ports. You should replace
the ocurrences og localhost to name for your server. Remember
that you should change a line that look like this:

{hosts, ["localhost"]}.

In order to give a name to the server. You also should replace "secret"
with a password that will be used by the chessd to connect to ejabberd.

Then just restart the ejabberd server if it was already running.

--- Setting up chessd ---

Finally, let's setup the server. Settgin up chessd consist only in inform
the server of the previous configurations. All you have to do is edit the
config.xml. It should look like this:

<server>
    <rating-component
        server_address="localhost"
        server_port="<port1>"
        server_password="secret"
        node_name="rating.shiva"
    />
    <game-component
        server_address="localhost"
        server_port="<port2>"
        server_password="secret"
        node_name="games.shiva"
    />
    <match-component
        server_address="localhost"
        server_port="<port3>"
        server_password="secret"
        node_name="match.shiva"
    />

    <admin-component
        server_address="localhost"
        server_port="<port4>"
        server_password="secret"
        node_name="admin.shiva"
        server_name="shiva"
    />

    <database
        host="localhost"
        port="5432"
        db_name="chessd-dev"
        user="chessd"
        password="chessd"
    />
    <log
        filename="log/chessd.log"
    />
</server>

You have to replace the <port1> to <port4>, "secret" and all occurences
of localhost with the name of the jabber server (if you have changed that),
to the same values you put in the ejabberd config file.  Next, edit the
database information. And, finally, the log file can be changed to something
else if you like, but this log file isn't much useful yet, it just servers
the purpose of develpment, basically the log file consist in all the
traffic the gos in and out of the server.
Then just run the server. It will look the PWD directory for the config
file, if it is somewhere else you can pass the name as paramenter like this:

$ bin/chessd -c somewhere-else/config.xml

Now we are done, the server should be working now. Now we need an interface
to play, check out the related project chessd webclient and the bosh
implementation that tunnels the jabber communication through a web server.
The ejabberd has a bosh implementation too, it should work too but it
was not tested.
